// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/jxxshark/app/ent/specializeddiag"
	"github.com/jxxshark/app/ent/user"
)

// Specializeddiag is the model entity for the Specializeddiag schema.
type Specializeddiag struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Specializeddiacnostictype holds the value of the "specializeddiacnostictype" field.
	Specializeddiacnostictype string `json:"specializeddiacnostictype,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SpecializeddiagQuery when eager-loading is set.
	Edges   SpecializeddiagEdges `json:"edges"`
	user_id *int
}

// SpecializeddiagEdges holds the relations/edges for other nodes in the graph.
type SpecializeddiagEdges struct {
	// Appointment holds the value of the appointment edge.
	Appointment []*Specializedappoint
	// User holds the value of the user edge.
	User *User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AppointmentOrErr returns the Appointment value or an error if the edge
// was not loaded in eager-loading.
func (e SpecializeddiagEdges) AppointmentOrErr() ([]*Specializedappoint, error) {
	if e.loadedTypes[0] {
		return e.Appointment, nil
	}
	return nil, &NotLoadedError{edge: "appointment"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SpecializeddiagEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Specializeddiag) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // specializeddiacnostictype
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Specializeddiag) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // user_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Specializeddiag fields.
func (s *Specializeddiag) assignValues(values ...interface{}) error {
	if m, n := len(values), len(specializeddiag.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	s.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field specializeddiacnostictype", values[0])
	} else if value.Valid {
		s.Specializeddiacnostictype = value.String
	}
	values = values[1:]
	if len(values) == len(specializeddiag.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_id", value)
		} else if value.Valid {
			s.user_id = new(int)
			*s.user_id = int(value.Int64)
		}
	}
	return nil
}

// QueryAppointment queries the appointment edge of the Specializeddiag.
func (s *Specializeddiag) QueryAppointment() *SpecializedappointQuery {
	return (&SpecializeddiagClient{config: s.config}).QueryAppointment(s)
}

// QueryUser queries the user edge of the Specializeddiag.
func (s *Specializeddiag) QueryUser() *UserQuery {
	return (&SpecializeddiagClient{config: s.config}).QueryUser(s)
}

// Update returns a builder for updating this Specializeddiag.
// Note that, you need to call Specializeddiag.Unwrap() before calling this method, if this Specializeddiag
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Specializeddiag) Update() *SpecializeddiagUpdateOne {
	return (&SpecializeddiagClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Specializeddiag) Unwrap() *Specializeddiag {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Specializeddiag is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Specializeddiag) String() string {
	var builder strings.Builder
	builder.WriteString("Specializeddiag(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", specializeddiacnostictype=")
	builder.WriteString(s.Specializeddiacnostictype)
	builder.WriteByte(')')
	return builder.String()
}

// Specializeddiags is a parsable slice of Specializeddiag.
type Specializeddiags []*Specializeddiag

func (s Specializeddiags) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
