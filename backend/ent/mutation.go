// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/jxxshark/app/ent/patient"
	"github.com/jxxshark/app/ent/specializedappoint"
	"github.com/jxxshark/app/ent/specializeddiag"
	"github.com/jxxshark/app/ent/user"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypePatient            = "Patient"
	TypeSpecializedappoint = "Specializedappoint"
	TypeSpecializeddiag    = "Specializeddiag"
	TypeUser               = "User"
)

// PatientMutation represents an operation that mutate the Patients
// nodes in the graph.
type PatientMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	name               *string
	age                *int
	addage             *int
	clearedFields      map[string]struct{}
	appointment        map[int]struct{}
	removedappointment map[int]struct{}
	done               bool
	oldValue           func(context.Context) (*Patient, error)
}

var _ ent.Mutation = (*PatientMutation)(nil)

// patientOption allows to manage the mutation configuration using functional options.
type patientOption func(*PatientMutation)

// newPatientMutation creates new mutation for $n.Name.
func newPatientMutation(c config, op Op, opts ...patientOption) *PatientMutation {
	m := &PatientMutation{
		config:        c,
		op:            op,
		typ:           TypePatient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatientID sets the id field of the mutation.
func withPatientID(id int) patientOption {
	return func(m *PatientMutation) {
		var (
			err   error
			once  sync.Once
			value *Patient
		)
		m.oldValue = func(ctx context.Context) (*Patient, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Patient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatient sets the old Patient of the mutation.
func withPatient(node *Patient) patientOption {
	return func(m *PatientMutation) {
		m.oldValue = func(context.Context) (*Patient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PatientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *PatientMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *PatientMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *PatientMutation) ResetName() {
	m.name = nil
}

// SetAge sets the age field.
func (m *PatientMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the age value in the mutation.
func (m *PatientMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old age value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAge is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to age.
func (m *PatientMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the age field in this mutation.
func (m *PatientMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ResetAge reset all changes of the "age" field.
func (m *PatientMutation) ResetAge() {
	m.age = nil
	m.addage = nil
}

// AddAppointmentIDs adds the appointment edge to Specializedappoint by ids.
func (m *PatientMutation) AddAppointmentIDs(ids ...int) {
	if m.appointment == nil {
		m.appointment = make(map[int]struct{})
	}
	for i := range ids {
		m.appointment[ids[i]] = struct{}{}
	}
}

// RemoveAppointmentIDs removes the appointment edge to Specializedappoint by ids.
func (m *PatientMutation) RemoveAppointmentIDs(ids ...int) {
	if m.removedappointment == nil {
		m.removedappointment = make(map[int]struct{})
	}
	for i := range ids {
		m.removedappointment[ids[i]] = struct{}{}
	}
}

// RemovedAppointment returns the removed ids of appointment.
func (m *PatientMutation) RemovedAppointmentIDs() (ids []int) {
	for id := range m.removedappointment {
		ids = append(ids, id)
	}
	return
}

// AppointmentIDs returns the appointment ids in the mutation.
func (m *PatientMutation) AppointmentIDs() (ids []int) {
	for id := range m.appointment {
		ids = append(ids, id)
	}
	return
}

// ResetAppointment reset all changes of the "appointment" edge.
func (m *PatientMutation) ResetAppointment() {
	m.appointment = nil
	m.removedappointment = nil
}

// Op returns the operation name.
func (m *PatientMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Patient).
func (m *PatientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PatientMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, patient.FieldName)
	}
	if m.age != nil {
		fields = append(fields, patient.FieldAge)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PatientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldName:
		return m.Name()
	case patient.FieldAge:
		return m.Age()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PatientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patient.FieldName:
		return m.OldName(ctx)
	case patient.FieldAge:
		return m.OldAge(ctx)
	}
	return nil, fmt.Errorf("unknown Patient field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patient.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case patient.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PatientMutation) AddedFields() []string {
	var fields []string
	if m.addage != nil {
		fields = append(fields, patient.FieldAge)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PatientMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldAge:
		return m.AddedAge()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) AddField(name string, value ent.Value) error {
	switch name {
	case patient.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	}
	return fmt.Errorf("unknown Patient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PatientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PatientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Patient nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PatientMutation) ResetField(name string) error {
	switch name {
	case patient.FieldName:
		m.ResetName()
		return nil
	case patient.FieldAge:
		m.ResetAge()
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PatientMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.appointment != nil {
		edges = append(edges, patient.EdgeAppointment)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PatientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgeAppointment:
		ids := make([]ent.Value, 0, len(m.appointment))
		for id := range m.appointment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PatientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedappointment != nil {
		edges = append(edges, patient.EdgeAppointment)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PatientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgeAppointment:
		ids := make([]ent.Value, 0, len(m.removedappointment))
		for id := range m.removedappointment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PatientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PatientMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PatientMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Patient unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PatientMutation) ResetEdge(name string) error {
	switch name {
	case patient.EdgeAppointment:
		m.ResetAppointment()
		return nil
	}
	return fmt.Errorf("unknown Patient edge %s", name)
}

// SpecializedappointMutation represents an operation that mutate the Specializedappoints
// nodes in the graph.
type SpecializedappointMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	_Date                  *time.Time
	clearedFields          map[string]struct{}
	user                   *int
	cleareduser            bool
	patient                *int
	clearedpatient         bool
	specializeddiag        *int
	clearedspecializeddiag bool
	done                   bool
	oldValue               func(context.Context) (*Specializedappoint, error)
}

var _ ent.Mutation = (*SpecializedappointMutation)(nil)

// specializedappointOption allows to manage the mutation configuration using functional options.
type specializedappointOption func(*SpecializedappointMutation)

// newSpecializedappointMutation creates new mutation for $n.Name.
func newSpecializedappointMutation(c config, op Op, opts ...specializedappointOption) *SpecializedappointMutation {
	m := &SpecializedappointMutation{
		config:        c,
		op:            op,
		typ:           TypeSpecializedappoint,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSpecializedappointID sets the id field of the mutation.
func withSpecializedappointID(id int) specializedappointOption {
	return func(m *SpecializedappointMutation) {
		var (
			err   error
			once  sync.Once
			value *Specializedappoint
		)
		m.oldValue = func(ctx context.Context) (*Specializedappoint, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Specializedappoint.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSpecializedappoint sets the old Specializedappoint of the mutation.
func withSpecializedappoint(node *Specializedappoint) specializedappointOption {
	return func(m *SpecializedappointMutation) {
		m.oldValue = func(context.Context) (*Specializedappoint, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SpecializedappointMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SpecializedappointMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *SpecializedappointMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDate sets the Date field.
func (m *SpecializedappointMutation) SetDate(t time.Time) {
	m._Date = &t
}

// Date returns the Date value in the mutation.
func (m *SpecializedappointMutation) Date() (r time.Time, exists bool) {
	v := m._Date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old Date value of the Specializedappoint.
// If the Specializedappoint object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SpecializedappointMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDate is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate reset all changes of the "Date" field.
func (m *SpecializedappointMutation) ResetDate() {
	m._Date = nil
}

// SetUserID sets the user edge to User by id.
func (m *SpecializedappointMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the user edge to User.
func (m *SpecializedappointMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the edge user was cleared.
func (m *SpecializedappointMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the user id in the mutation.
func (m *SpecializedappointMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the user ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *SpecializedappointMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser reset all changes of the "user" edge.
func (m *SpecializedappointMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetPatientID sets the patient edge to Patient by id.
func (m *SpecializedappointMutation) SetPatientID(id int) {
	m.patient = &id
}

// ClearPatient clears the patient edge to Patient.
func (m *SpecializedappointMutation) ClearPatient() {
	m.clearedpatient = true
}

// PatientCleared returns if the edge patient was cleared.
func (m *SpecializedappointMutation) PatientCleared() bool {
	return m.clearedpatient
}

// PatientID returns the patient id in the mutation.
func (m *SpecializedappointMutation) PatientID() (id int, exists bool) {
	if m.patient != nil {
		return *m.patient, true
	}
	return
}

// PatientIDs returns the patient ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PatientID instead. It exists only for internal usage by the builders.
func (m *SpecializedappointMutation) PatientIDs() (ids []int) {
	if id := m.patient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatient reset all changes of the "patient" edge.
func (m *SpecializedappointMutation) ResetPatient() {
	m.patient = nil
	m.clearedpatient = false
}

// SetSpecializeddiagID sets the specializeddiag edge to Specializeddiag by id.
func (m *SpecializedappointMutation) SetSpecializeddiagID(id int) {
	m.specializeddiag = &id
}

// ClearSpecializeddiag clears the specializeddiag edge to Specializeddiag.
func (m *SpecializedappointMutation) ClearSpecializeddiag() {
	m.clearedspecializeddiag = true
}

// SpecializeddiagCleared returns if the edge specializeddiag was cleared.
func (m *SpecializedappointMutation) SpecializeddiagCleared() bool {
	return m.clearedspecializeddiag
}

// SpecializeddiagID returns the specializeddiag id in the mutation.
func (m *SpecializedappointMutation) SpecializeddiagID() (id int, exists bool) {
	if m.specializeddiag != nil {
		return *m.specializeddiag, true
	}
	return
}

// SpecializeddiagIDs returns the specializeddiag ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// SpecializeddiagID instead. It exists only for internal usage by the builders.
func (m *SpecializedappointMutation) SpecializeddiagIDs() (ids []int) {
	if id := m.specializeddiag; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSpecializeddiag reset all changes of the "specializeddiag" edge.
func (m *SpecializedappointMutation) ResetSpecializeddiag() {
	m.specializeddiag = nil
	m.clearedspecializeddiag = false
}

// Op returns the operation name.
func (m *SpecializedappointMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Specializedappoint).
func (m *SpecializedappointMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *SpecializedappointMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Date != nil {
		fields = append(fields, specializedappoint.FieldDate)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *SpecializedappointMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case specializedappoint.FieldDate:
		return m.Date()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *SpecializedappointMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case specializedappoint.FieldDate:
		return m.OldDate(ctx)
	}
	return nil, fmt.Errorf("unknown Specializedappoint field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SpecializedappointMutation) SetField(name string, value ent.Value) error {
	switch name {
	case specializedappoint.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	}
	return fmt.Errorf("unknown Specializedappoint field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *SpecializedappointMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *SpecializedappointMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SpecializedappointMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Specializedappoint numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *SpecializedappointMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *SpecializedappointMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *SpecializedappointMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Specializedappoint nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *SpecializedappointMutation) ResetField(name string) error {
	switch name {
	case specializedappoint.FieldDate:
		m.ResetDate()
		return nil
	}
	return fmt.Errorf("unknown Specializedappoint field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *SpecializedappointMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.user != nil {
		edges = append(edges, specializedappoint.EdgeUser)
	}
	if m.patient != nil {
		edges = append(edges, specializedappoint.EdgePatient)
	}
	if m.specializeddiag != nil {
		edges = append(edges, specializedappoint.EdgeSpecializeddiag)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *SpecializedappointMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case specializedappoint.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case specializedappoint.EdgePatient:
		if id := m.patient; id != nil {
			return []ent.Value{*id}
		}
	case specializedappoint.EdgeSpecializeddiag:
		if id := m.specializeddiag; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *SpecializedappointMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *SpecializedappointMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *SpecializedappointMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduser {
		edges = append(edges, specializedappoint.EdgeUser)
	}
	if m.clearedpatient {
		edges = append(edges, specializedappoint.EdgePatient)
	}
	if m.clearedspecializeddiag {
		edges = append(edges, specializedappoint.EdgeSpecializeddiag)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *SpecializedappointMutation) EdgeCleared(name string) bool {
	switch name {
	case specializedappoint.EdgeUser:
		return m.cleareduser
	case specializedappoint.EdgePatient:
		return m.clearedpatient
	case specializedappoint.EdgeSpecializeddiag:
		return m.clearedspecializeddiag
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *SpecializedappointMutation) ClearEdge(name string) error {
	switch name {
	case specializedappoint.EdgeUser:
		m.ClearUser()
		return nil
	case specializedappoint.EdgePatient:
		m.ClearPatient()
		return nil
	case specializedappoint.EdgeSpecializeddiag:
		m.ClearSpecializeddiag()
		return nil
	}
	return fmt.Errorf("unknown Specializedappoint unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *SpecializedappointMutation) ResetEdge(name string) error {
	switch name {
	case specializedappoint.EdgeUser:
		m.ResetUser()
		return nil
	case specializedappoint.EdgePatient:
		m.ResetPatient()
		return nil
	case specializedappoint.EdgeSpecializeddiag:
		m.ResetSpecializeddiag()
		return nil
	}
	return fmt.Errorf("unknown Specializedappoint edge %s", name)
}

// SpecializeddiagMutation represents an operation that mutate the Specializeddiags
// nodes in the graph.
type SpecializeddiagMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	specializeddiacnostictype *string
	clearedFields             map[string]struct{}
	appointment               map[int]struct{}
	removedappointment        map[int]struct{}
	user                      *int
	cleareduser               bool
	done                      bool
	oldValue                  func(context.Context) (*Specializeddiag, error)
}

var _ ent.Mutation = (*SpecializeddiagMutation)(nil)

// specializeddiagOption allows to manage the mutation configuration using functional options.
type specializeddiagOption func(*SpecializeddiagMutation)

// newSpecializeddiagMutation creates new mutation for $n.Name.
func newSpecializeddiagMutation(c config, op Op, opts ...specializeddiagOption) *SpecializeddiagMutation {
	m := &SpecializeddiagMutation{
		config:        c,
		op:            op,
		typ:           TypeSpecializeddiag,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSpecializeddiagID sets the id field of the mutation.
func withSpecializeddiagID(id int) specializeddiagOption {
	return func(m *SpecializeddiagMutation) {
		var (
			err   error
			once  sync.Once
			value *Specializeddiag
		)
		m.oldValue = func(ctx context.Context) (*Specializeddiag, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Specializeddiag.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSpecializeddiag sets the old Specializeddiag of the mutation.
func withSpecializeddiag(node *Specializeddiag) specializeddiagOption {
	return func(m *SpecializeddiagMutation) {
		m.oldValue = func(context.Context) (*Specializeddiag, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SpecializeddiagMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SpecializeddiagMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *SpecializeddiagMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetSpecializeddiacnostictype sets the specializeddiacnostictype field.
func (m *SpecializeddiagMutation) SetSpecializeddiacnostictype(s string) {
	m.specializeddiacnostictype = &s
}

// Specializeddiacnostictype returns the specializeddiacnostictype value in the mutation.
func (m *SpecializeddiagMutation) Specializeddiacnostictype() (r string, exists bool) {
	v := m.specializeddiacnostictype
	if v == nil {
		return
	}
	return *v, true
}

// OldSpecializeddiacnostictype returns the old specializeddiacnostictype value of the Specializeddiag.
// If the Specializeddiag object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SpecializeddiagMutation) OldSpecializeddiacnostictype(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSpecializeddiacnostictype is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSpecializeddiacnostictype requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpecializeddiacnostictype: %w", err)
	}
	return oldValue.Specializeddiacnostictype, nil
}

// ResetSpecializeddiacnostictype reset all changes of the "specializeddiacnostictype" field.
func (m *SpecializeddiagMutation) ResetSpecializeddiacnostictype() {
	m.specializeddiacnostictype = nil
}

// AddAppointmentIDs adds the appointment edge to Specializedappoint by ids.
func (m *SpecializeddiagMutation) AddAppointmentIDs(ids ...int) {
	if m.appointment == nil {
		m.appointment = make(map[int]struct{})
	}
	for i := range ids {
		m.appointment[ids[i]] = struct{}{}
	}
}

// RemoveAppointmentIDs removes the appointment edge to Specializedappoint by ids.
func (m *SpecializeddiagMutation) RemoveAppointmentIDs(ids ...int) {
	if m.removedappointment == nil {
		m.removedappointment = make(map[int]struct{})
	}
	for i := range ids {
		m.removedappointment[ids[i]] = struct{}{}
	}
}

// RemovedAppointment returns the removed ids of appointment.
func (m *SpecializeddiagMutation) RemovedAppointmentIDs() (ids []int) {
	for id := range m.removedappointment {
		ids = append(ids, id)
	}
	return
}

// AppointmentIDs returns the appointment ids in the mutation.
func (m *SpecializeddiagMutation) AppointmentIDs() (ids []int) {
	for id := range m.appointment {
		ids = append(ids, id)
	}
	return
}

// ResetAppointment reset all changes of the "appointment" edge.
func (m *SpecializeddiagMutation) ResetAppointment() {
	m.appointment = nil
	m.removedappointment = nil
}

// SetUserID sets the user edge to User by id.
func (m *SpecializeddiagMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the user edge to User.
func (m *SpecializeddiagMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the edge user was cleared.
func (m *SpecializeddiagMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the user id in the mutation.
func (m *SpecializeddiagMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the user ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *SpecializeddiagMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser reset all changes of the "user" edge.
func (m *SpecializeddiagMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Op returns the operation name.
func (m *SpecializeddiagMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Specializeddiag).
func (m *SpecializeddiagMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *SpecializeddiagMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.specializeddiacnostictype != nil {
		fields = append(fields, specializeddiag.FieldSpecializeddiacnostictype)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *SpecializeddiagMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case specializeddiag.FieldSpecializeddiacnostictype:
		return m.Specializeddiacnostictype()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *SpecializeddiagMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case specializeddiag.FieldSpecializeddiacnostictype:
		return m.OldSpecializeddiacnostictype(ctx)
	}
	return nil, fmt.Errorf("unknown Specializeddiag field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SpecializeddiagMutation) SetField(name string, value ent.Value) error {
	switch name {
	case specializeddiag.FieldSpecializeddiacnostictype:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpecializeddiacnostictype(v)
		return nil
	}
	return fmt.Errorf("unknown Specializeddiag field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *SpecializeddiagMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *SpecializeddiagMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SpecializeddiagMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Specializeddiag numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *SpecializeddiagMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *SpecializeddiagMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *SpecializeddiagMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Specializeddiag nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *SpecializeddiagMutation) ResetField(name string) error {
	switch name {
	case specializeddiag.FieldSpecializeddiacnostictype:
		m.ResetSpecializeddiacnostictype()
		return nil
	}
	return fmt.Errorf("unknown Specializeddiag field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *SpecializeddiagMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.appointment != nil {
		edges = append(edges, specializeddiag.EdgeAppointment)
	}
	if m.user != nil {
		edges = append(edges, specializeddiag.EdgeUser)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *SpecializeddiagMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case specializeddiag.EdgeAppointment:
		ids := make([]ent.Value, 0, len(m.appointment))
		for id := range m.appointment {
			ids = append(ids, id)
		}
		return ids
	case specializeddiag.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *SpecializeddiagMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedappointment != nil {
		edges = append(edges, specializeddiag.EdgeAppointment)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *SpecializeddiagMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case specializeddiag.EdgeAppointment:
		ids := make([]ent.Value, 0, len(m.removedappointment))
		for id := range m.removedappointment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *SpecializeddiagMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, specializeddiag.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *SpecializeddiagMutation) EdgeCleared(name string) bool {
	switch name {
	case specializeddiag.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *SpecializeddiagMutation) ClearEdge(name string) error {
	switch name {
	case specializeddiag.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Specializeddiag unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *SpecializeddiagMutation) ResetEdge(name string) error {
	switch name {
	case specializeddiag.EdgeAppointment:
		m.ResetAppointment()
		return nil
	case specializeddiag.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Specializeddiag edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	username               *string
	useremail              *string
	clearedFields          map[string]struct{}
	appointment            map[int]struct{}
	removedappointment     map[int]struct{}
	specializeddiag        map[int]struct{}
	removedspecializeddiag map[int]struct{}
	done                   bool
	oldValue               func(context.Context) (*User, error)
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUsername sets the username field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the username value in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old username value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUsername is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername reset all changes of the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetUseremail sets the useremail field.
func (m *UserMutation) SetUseremail(s string) {
	m.useremail = &s
}

// Useremail returns the useremail value in the mutation.
func (m *UserMutation) Useremail() (r string, exists bool) {
	v := m.useremail
	if v == nil {
		return
	}
	return *v, true
}

// OldUseremail returns the old useremail value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUseremail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUseremail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUseremail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUseremail: %w", err)
	}
	return oldValue.Useremail, nil
}

// ResetUseremail reset all changes of the "useremail" field.
func (m *UserMutation) ResetUseremail() {
	m.useremail = nil
}

// AddAppointmentIDs adds the appointment edge to Specializedappoint by ids.
func (m *UserMutation) AddAppointmentIDs(ids ...int) {
	if m.appointment == nil {
		m.appointment = make(map[int]struct{})
	}
	for i := range ids {
		m.appointment[ids[i]] = struct{}{}
	}
}

// RemoveAppointmentIDs removes the appointment edge to Specializedappoint by ids.
func (m *UserMutation) RemoveAppointmentIDs(ids ...int) {
	if m.removedappointment == nil {
		m.removedappointment = make(map[int]struct{})
	}
	for i := range ids {
		m.removedappointment[ids[i]] = struct{}{}
	}
}

// RemovedAppointment returns the removed ids of appointment.
func (m *UserMutation) RemovedAppointmentIDs() (ids []int) {
	for id := range m.removedappointment {
		ids = append(ids, id)
	}
	return
}

// AppointmentIDs returns the appointment ids in the mutation.
func (m *UserMutation) AppointmentIDs() (ids []int) {
	for id := range m.appointment {
		ids = append(ids, id)
	}
	return
}

// ResetAppointment reset all changes of the "appointment" edge.
func (m *UserMutation) ResetAppointment() {
	m.appointment = nil
	m.removedappointment = nil
}

// AddSpecializeddiagIDs adds the specializeddiag edge to Specializeddiag by ids.
func (m *UserMutation) AddSpecializeddiagIDs(ids ...int) {
	if m.specializeddiag == nil {
		m.specializeddiag = make(map[int]struct{})
	}
	for i := range ids {
		m.specializeddiag[ids[i]] = struct{}{}
	}
}

// RemoveSpecializeddiagIDs removes the specializeddiag edge to Specializeddiag by ids.
func (m *UserMutation) RemoveSpecializeddiagIDs(ids ...int) {
	if m.removedspecializeddiag == nil {
		m.removedspecializeddiag = make(map[int]struct{})
	}
	for i := range ids {
		m.removedspecializeddiag[ids[i]] = struct{}{}
	}
}

// RemovedSpecializeddiag returns the removed ids of specializeddiag.
func (m *UserMutation) RemovedSpecializeddiagIDs() (ids []int) {
	for id := range m.removedspecializeddiag {
		ids = append(ids, id)
	}
	return
}

// SpecializeddiagIDs returns the specializeddiag ids in the mutation.
func (m *UserMutation) SpecializeddiagIDs() (ids []int) {
	for id := range m.specializeddiag {
		ids = append(ids, id)
	}
	return
}

// ResetSpecializeddiag reset all changes of the "specializeddiag" edge.
func (m *UserMutation) ResetSpecializeddiag() {
	m.specializeddiag = nil
	m.removedspecializeddiag = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.useremail != nil {
		fields = append(fields, user.FieldUseremail)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldUseremail:
		return m.Useremail()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldUseremail:
		return m.OldUseremail(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldUseremail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUseremail(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldUseremail:
		m.ResetUseremail()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.appointment != nil {
		edges = append(edges, user.EdgeAppointment)
	}
	if m.specializeddiag != nil {
		edges = append(edges, user.EdgeSpecializeddiag)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeAppointment:
		ids := make([]ent.Value, 0, len(m.appointment))
		for id := range m.appointment {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSpecializeddiag:
		ids := make([]ent.Value, 0, len(m.specializeddiag))
		for id := range m.specializeddiag {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedappointment != nil {
		edges = append(edges, user.EdgeAppointment)
	}
	if m.removedspecializeddiag != nil {
		edges = append(edges, user.EdgeSpecializeddiag)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeAppointment:
		ids := make([]ent.Value, 0, len(m.removedappointment))
		for id := range m.removedappointment {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSpecializeddiag:
		ids := make([]ent.Value, 0, len(m.removedspecializeddiag))
		for id := range m.removedspecializeddiag {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeAppointment:
		m.ResetAppointment()
		return nil
	case user.EdgeSpecializeddiag:
		m.ResetSpecializeddiag()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
