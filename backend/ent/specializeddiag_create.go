// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/jxxshark/app/ent/specializedappoint"
	"github.com/jxxshark/app/ent/specializeddiag"
	"github.com/jxxshark/app/ent/user"
)

// SpecializeddiagCreate is the builder for creating a Specializeddiag entity.
type SpecializeddiagCreate struct {
	config
	mutation *SpecializeddiagMutation
	hooks    []Hook
}

// SetSpecializeddiacnostictype sets the specializeddiacnostictype field.
func (sc *SpecializeddiagCreate) SetSpecializeddiacnostictype(s string) *SpecializeddiagCreate {
	sc.mutation.SetSpecializeddiacnostictype(s)
	return sc
}

// AddAppointmentIDs adds the appointment edge to Specializedappoint by ids.
func (sc *SpecializeddiagCreate) AddAppointmentIDs(ids ...int) *SpecializeddiagCreate {
	sc.mutation.AddAppointmentIDs(ids...)
	return sc
}

// AddAppointment adds the appointment edges to Specializedappoint.
func (sc *SpecializeddiagCreate) AddAppointment(s ...*Specializedappoint) *SpecializeddiagCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddAppointmentIDs(ids...)
}

// SetUserID sets the user edge to User by id.
func (sc *SpecializeddiagCreate) SetUserID(id int) *SpecializeddiagCreate {
	sc.mutation.SetUserID(id)
	return sc
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (sc *SpecializeddiagCreate) SetNillableUserID(id *int) *SpecializeddiagCreate {
	if id != nil {
		sc = sc.SetUserID(*id)
	}
	return sc
}

// SetUser sets the user edge to User.
func (sc *SpecializeddiagCreate) SetUser(u *User) *SpecializeddiagCreate {
	return sc.SetUserID(u.ID)
}

// Mutation returns the SpecializeddiagMutation object of the builder.
func (sc *SpecializeddiagCreate) Mutation() *SpecializeddiagMutation {
	return sc.mutation
}

// Save creates the Specializeddiag in the database.
func (sc *SpecializeddiagCreate) Save(ctx context.Context) (*Specializeddiag, error) {
	if _, ok := sc.mutation.Specializeddiacnostictype(); !ok {
		return nil, &ValidationError{Name: "specializeddiacnostictype", err: errors.New("ent: missing required field \"specializeddiacnostictype\"")}
	}
	if v, ok := sc.mutation.Specializeddiacnostictype(); ok {
		if err := specializeddiag.SpecializeddiacnostictypeValidator(v); err != nil {
			return nil, &ValidationError{Name: "specializeddiacnostictype", err: fmt.Errorf("ent: validator failed for field \"specializeddiacnostictype\": %w", err)}
		}
	}
	var (
		err  error
		node *Specializeddiag
	)
	if len(sc.hooks) == 0 {
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SpecializeddiagMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sc.mutation = mutation
			node, err = sc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SpecializeddiagCreate) SaveX(ctx context.Context) *Specializeddiag {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sc *SpecializeddiagCreate) sqlSave(ctx context.Context) (*Specializeddiag, error) {
	s, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	s.ID = int(id)
	return s, nil
}

func (sc *SpecializeddiagCreate) createSpec() (*Specializeddiag, *sqlgraph.CreateSpec) {
	var (
		s     = &Specializeddiag{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: specializeddiag.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: specializeddiag.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.Specializeddiacnostictype(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: specializeddiag.FieldSpecializeddiacnostictype,
		})
		s.Specializeddiacnostictype = value
	}
	if nodes := sc.mutation.AppointmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   specializeddiag.AppointmentTable,
			Columns: []string{specializeddiag.AppointmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: specializedappoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   specializeddiag.UserTable,
			Columns: []string{specializeddiag.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return s, _spec
}
