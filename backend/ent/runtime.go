// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/jxxshark/app/ent/patient"
	"github.com/jxxshark/app/ent/schema"
	"github.com/jxxshark/app/ent/specializeddiag"
	"github.com/jxxshark/app/ent/user"
)

// The init function reads all schema descriptors with runtime
// code (default values, validators or hooks) and stitches it
// to their package variables.
func init() {
	patientFields := schema.Patient{}.Fields()
	_ = patientFields
	// patientDescName is the schema descriptor for name field.
	patientDescName := patientFields[0].Descriptor()
	// patient.NameValidator is a validator for the "name" field. It is called by the builders before save.
	patient.NameValidator = patientDescName.Validators[0].(func(string) error)
	specializeddiagFields := schema.Specializeddiag{}.Fields()
	_ = specializeddiagFields
	// specializeddiagDescSpecializeddiacnostictype is the schema descriptor for specializeddiacnostictype field.
	specializeddiagDescSpecializeddiacnostictype := specializeddiagFields[0].Descriptor()
	// specializeddiag.SpecializeddiacnostictypeValidator is a validator for the "specializeddiacnostictype" field. It is called by the builders before save.
	specializeddiag.SpecializeddiacnostictypeValidator = specializeddiagDescSpecializeddiacnostictype.Validators[0].(func(string) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[0].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = userDescUsername.Validators[0].(func(string) error)
	// userDescUseremail is the schema descriptor for useremail field.
	userDescUseremail := userFields[1].Descriptor()
	// user.UseremailValidator is a validator for the "useremail" field. It is called by the builders before save.
	user.UseremailValidator = userDescUseremail.Validators[0].(func(string) error)
}
